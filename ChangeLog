2012-01-28  James Morris  <james@jwm-art.net>

    * CMakeLists.txt: enabled -Wall -Wextra (assume GCC compiler).

    * libboxyseq/*: various minor problems such as missing headers
      discovered and resolved due to compiler flags.

    * boxyseq_gui/gui_main.c: new keyboard shortcuts, see
      KEYBOARD_SHORTCUTS file.

    * grid_boundary.h: new function grbound_flags_toggle.

    * grid_boundary.h: modified GRID_BOUNDARY_FLAGS to be saner. 
      Previously from user perspective, boundaries could either play, 
      block, or ignore events. This was achieved by three flags but is 
      now achieved with two: GRBOUND_EVENT_PROCESS to ignore events or 
      not, and GRBOUND_EVENT_PLAY to process events as play events or as 
      block events. Toggling the process/ignore state no longer destroys
      the play/block state.

    * gui_box.c: fix zoom scaling to integer multiples to maintain sharp
      edges to boxes.

    * gui_grid.c: boundaries set to ignore events now drawn with a 
      dashed line style. selected boundary is shown not by colouring the 
      whole box as before but by a thick blue outline. all boundary 
      outlines drawn with translucency.

    * gui_misc.[ch]: new function create_diagonal_hatching_pattern 
      does exactly as it says. unfortunately the pattern looks crap when 
      scaled by cairo so it isn't used for anything.


2012-01-24  James Morris  <james@jwm-art.net>

    * freespace_state.c: removed column smart search algorithm. column 
      smart searches now are performed by the row smart functions but 
      do so on a secondary array added to the freespace struct. the 
      secondary array is a 90 degree clockwise rotation of the primary 
      array. space removals and additions now incurr a minor performance 
      cost for operating on both arrays. however this cost is negligable
      compared to the cost of searching by collumn on a data structure 
      optimized for search by row.

    * freespace_test/freespace_test.c: tests for both column smart and 
      row smart are all performed and pass now.


2012-01-20  James Morris  <james@jwm-art.net>

    * in the entry for the 17th January 2012 i stated that
      x_to_index_offset now returns the correct offset value
      range, ie bit number. that is, it returns the bit
      number in accordance with LSB0. previosuly it would
      have been LSB1 (of which i can find no reference).
      in the early days of the algorithm i may have tried
      MSB1 or MSB0 but my unfamiliarity with bit twiddling
      made it too confusing.
      see: http://en.wikipedia.org/wiki/Bit_numbering


2012-01-18  James Morris  <james@jwm-art.net>

    * libboxyseq/freespace_state.c: further work done in
       row-smart routines. fixed placements jutting out of
       boundaries. 32, 16, and 8 bit arrays work now.

    * freespace_test/freespace_test.c: additional 2 tests:-
        3) test placement and removal and replacement, 100
           of each of w:1~25, h:1~20.
        4) test placement within limited boundary (ie boxes
           smaller than boundary, and boundary smaller than
           freespace grid). boundary sizes range from 8 to
           120. boundaries filled with boxes until no space
           remains. box size around half of boundary. tests
           for jutting.

NOTE: collumn-smart routines still need development + testing.


2012-01-17  James Morris  <james@jwm-art.net>

    * libboxyseq/freespace_state.c: reworked fs_x_to_offset_index.
      now is x_to_index_offset, returns index rather than offset.
      correct offset value range.

    * libboxyseq/freespace_state.c: rework row-smart search
      routines, improve variable naming within them, enclose
      debug messages within FSDEBUG ifdef guards.

    * freespace_test/freespace_test.c: added proper testing
      of freespace search and remove routines:-
          1) test placement of box within a boundary of same size.
             performed for all box sizes at all possible locations.
          2) test placement of multiple equal-sized boxes. predict
             expected location and compare with result.

NOTE: collumn-smart routines need reworking and tests developing.


2010-09-29  James Morris  <james@jwm-art.net>

    * libboxyseq/CMakeLists.txt: #define for noof freespace
      state bits.

2010-09-29  Gabriel M. Beddingfield  <gabriel@teuton.org>

    * boxyseq_gui/CMakeLists.txt: fix linking for out-of-tree
      and/or parallel builds.
      
2010-09-28  James Morris  <james@jwm-art.net>

    * gui_grid.c (various/all): box refactoring.
      the creation of the scrollable, viewport, and drawing area
      has been removed from the grid and made generic so that
      other windows may use it (quite likely). the generic
      code for handling the moving and resizing of boxes
      has gone along with it.

    * gui_box.c (new file): contains elements previously in
      gui_grid.c - creates a scrollable drawing area,
      handles resizing of it, handles motion, button
      presses etc, related to box-objects within the drawing area.

    * note: gui_box.c DOES NOT handle any drawing.

2010-09-27  James Morris  <james@jwm-art.net>

    * gui_grid.c (various functions): generic handling
      the boundary-specifc code that was in the event
      handling callbacks (ie button presses, motion events)
      has been split out and placed into boundary specific
      functions for each of the event types.

    * gui_grid.c (various functions): generic handling
      the event callbacks now switch on an object type
      chosen and call the specific object types handling
      function for that type of event
      (ie gui_grid_motion_boundary)

    * gui_grid.c (various functions): generic handling
      the code performing the calculations to move and resize
      boundaries has been genericised into functions to
      handle any box with coordinates + dimensions as parameters.

    * gui_grid.c (various again): resize calculation improvements.


2010-09-26  James Morris  <james@jwm-art.net>

    * gui_grid.c (gui_grid_motion_event): boundary detection fix.

    * gui_grid.c (gui_grid_direction): called by gui_main when
      arrow keys are pressed. currently moves a boundary.

    * gui_grid.c (gui_grid_order_boundary): moves a boundary
      forward or backward in the boundary list.

    * gui_main.c (gui_key_press_event): *new* key processing.
      will need attention in future when more key shortcuts
      will be required.

    * grbound_manager.c (grbound_manager_grbound_order): orders
      a bounder backward or forward in the boundary list.

    * llist.c (llist_order_node): swaps the data of the specified
      node with the data of the previous node if it exists.

2010-09-24  James Morris  <james@jwm-art.net>

    * grid_boundary.c/h: threee new boundary 'states'
      to play as normal, to treat all events as blocks, and
      to ignore all events.

    * gui_grid.c: modified colouring of events - blocks are
      now always coloured grey. boundary outlines are grey when
      in the block state and bright red when in the ignore state.

    * gui_main.c: added keyboard shortcuts to handle changing
      boundary states.

2010-09-24  James Morris  <james@jwm-art.net>

    * gui_grid.c: modifications to enable the grid as part of the
      main window instead of as a seperate window as before.

    * gui_grid.c: modified so that gui_grid deals only with the display
      of the grid such that creation of buttons (ie zoom buttons)
      happens elsewhere. introduced two functions to connect the
      zoom buttons to the zoom callbacks.

    * gui_main.c: static globals moved into struct...
      struct defined in boxyseq_gui/include/gui_main_editor.h

2010-09-23  James Morris  <james@jwm-art.net>

    * gui_grid.c: using cairo_scale instead of performing scaling
      calculations.

    * gui_grid.c: (gui_grid_show): drawing area has scrollbars.
      the drawing area is added to a viewport which in turn is added
      to a scrolled_window - about time.

2010-08-15  James Morris  <james@jwm-art.net>

    * grid_boundary.c (grbound_private_new): channel no. innitialized.
    * grid_boundary.c (grbound_private_dup): channel no copied to dest
      these fixed the sudden-silence bug. that this bug did not occurr
      more often was down to luck.

    * real_time_data.c (rtdata_update): changed sleep loop to single.
      this fixed a nasty infinite-loop bug.

    * gui_grid.c (*): various GUI improvements. added boundary resize
      capability via right-mouse click/release.


2010-08-14  James Morris  <james@jwm-art.net>

    * freespace_state.c (fs_find_row_smart_l2r): cornercase bug fixed.
      this functions was fitting boxes whose right most edge lay beyond
      the right most edge of the boundary. fixed by changing:
          if (x >= endx && xoffset < endxoffset)
      to 
          if (x >= endx && xoffset <= endxoffset)
      strangely, this error did not turn up in the test data setup in
      the old isolated development version of the freespace state
      (then called freespace_grid) outside of the boxyseq tree.


2010-08-13  James Morris  <james@jwm-art.net>

    * Spent the morning being driven around by my Dad trying to find a 
      second hand wheel, tyre, and wheel nuts for my car. Some son of a 
      bitch stole a wheel off my car last night. Thanks Dad for coming
      to the rescue. Now I can get to work... Hurray :| (So most of 
      the changes listed today were done yesterday/last night.

    * boxy_sequencer*.*: replaced array based storage of patterns,
      grid boundaries, and midi out ports with llist implementations.

    * boxy_sequencer (boxyseq_rt_play): this function is cleaned up
      by removal or arrays.

    * grbound_manager.*
      moport_manager.*
      pattern_manager.*: these modules are used to replace the array
      storage mentioned in connection with boxy_sequencer. they handle
      creation/destruction of the data and store data in a llist. they
      also convert the llist to a pointer array.
      finally, they provide functions to perform operations in 
      connection with the RT thread (ie play/output etc).

    * various other changes and tweaks as a result of above, and other
      stuff i've forgotten and don't have time to remember because i
      must forget all about this and go to work where i will be bored
      shitless packing plastic punnets/trays/etc for eight hours.
      

2010-08-11  James Morris  <james@jwm-art.net>

    * real_time_data.c (rtdata_update): rt->ptr_free zeroed out
      zeroing out of rt->ptr_free prevents duplicate freeing of
      memory in rtdata_free.

    * real_time_data.c (struct real_time_data): data now const.

    * grid_boundary.c (grbound_rtdata_get_cb): now returns data!


2010-08-10  James Morris  <james@jwm-art.net>

    * grid_boundary.c (grbound_*): boundary now using the real_time_data
      update mechanism... (Check MSG displayed by boxyseq when run :-)


2010-08-09  James Morris  <james@jwm-art.net>

    * real_time_data.c (rtdata_*): new generic real time dat module.
      this uses glib atomic functions and is a generic version of the
      rt update process from (the old versions of) pattern.c.

    * pattern.c (*): refactoring. plist moved to event_list.c
      the data structure which specializes llist for events was previously
      called plist and resided within pattern.c. it is not called evlist and
      resides in event_list.c.  new code to handle the rt update process
      using the new generic mechanism and glib atomic functions. other
      minor maintanence jobs.


2010-08-04  James Morris  <james@jwm-art.net>

    * Lots, again and again.


2010-07-31  James Morris  <james@jwm-art.net>

    * boxy_sequencer.c (boxyseq_rt_init_jack_cycle): new function.
    calls moport_rt_init_jack_cycle.

    * boxy_sequencer.c (boxyseq_rt_play): code to detect 'shutdown'
    events. when detected calls boxyseq_rt_clear and sets 'quitting'
    flag so no further event processing ever takes place from that point
    on.

    * boxy_sequencer.c (boxyseq_rt_clear): calls moport_empty on all
    midi out ports.

    * boxy_sequencer.c (boxyseq_shutdown): initiates the shutdown 
    procedure.

2010-07-30  James Morris  <james@jwm-art.net>

    * grid_boundary.c (grid_remove_events): added calls to clear remaining
    buffers.

2010-07-29  James Morris  <james@jwm-art.net>

    * jack_midi.c (all): deleted/moved to jack_process.c

    * jack_transport.c (all): deleted/moved to jack_process.c

    * jack_process.c (all): new file is a conglomeration of the code
    formerly found in jack_midi.c and jack_transport.c. The API is now
    more concise with less implementation leaking into it.

    * include/jack_process_data.c: new file, contains a single data 
    structure used by jack_process.c implementation. Is a merger of the
    two data structures originally contained in jack_midi.c and 
    jack_transport.c.

    * jack_process.c (jd_rt_poll, jack_process_callback): additional
    stopped/started detection, new transport reposition detection. These
    trigger a call to boxyseq_rt_clear to wipe all event data from buffers
    etc, as well as disabling the duplication/dropped ticks messages on
    transport repositions.

    * jack_process.c (jack_process_callback): some playhead fiddling
    added to prevent dropped ticks when trying to synchronise with other
    timebase master applications.

*****        2010-07-29 was first ChangeLog entry for BoxySeq        *****
